openapi: 3.1.0
info:
  title: AI Contact Center OS MVP API
  version: 0.1.0
  description: |
    Core REST interfaces for the AI Contact Center MVP. Authentication is provided by Supabase JWTs.
servers:
  - url: https://api.example.com/v1
    description: Production (Fly.io)
  - url: http://localhost:8000/v1
    description: Local development
security:
  - bearerAuth: []
tags:
  - name: Conversations
    description: Customer chat lifecycle
  - name: Messages
    description: Message exchange between customer, AI, and agents
  - name: Approvals
    description: HITL approval workflow
  - name: Dashboard
    description: Supervisor monitoring
paths:
  /conversations:
    post:
      tags: [Conversations]
      summary: Start a new customer conversation
      description: |
        Creates a conversation and persists the first customer message. Anonymous visitors send an `X-Visitor-Token` header; authenticated customers use Supabase JWT.
      security: []
      parameters:
        - name: X-Visitor-Token
          in: header
          required: false
          schema:
            type: string
          description: Anonymous session token generated by the webchat client.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartConversationRequest'
      responses:
        '201':
          description: Conversation created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationResponse'
        '400':
          description: Invalid payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /conversations/{conversationId}:
    get:
      tags: [Conversations]
      summary: Get conversation details
      parameters:
        - $ref: '#/components/parameters/ConversationId'
      responses:
        '200':
          description: Conversation metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationResponse'
        '404':
          description: Conversation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /conversations/{conversationId}/status:
    get:
      tags: [Conversations]
      summary: Retrieve current conversation status
      parameters:
        - $ref: '#/components/parameters/ConversationId'
      responses:
        '200':
          description: Current status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationStatusResponse'
        '404':
          description: Conversation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags: [Conversations]
      summary: Update conversation status (agent takeover/escalation)
      parameters:
        - $ref: '#/components/parameters/ConversationId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConversationStatusUpdateRequest'
      responses:
        '200':
          description: Updated conversation status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationStatusResponse'
        '409':
          description: Invalid transition (does not match state machine)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /conversations/{conversationId}/messages:
    get:
      tags: [Messages]
      summary: List messages in a conversation
      parameters:
        - $ref: '#/components/parameters/ConversationId'
        - name: before
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Paginate by message id (exclusive).
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
      responses:
        '200':
          description: Messages ordered by creation time
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageListResponse'
    post:
      tags: [Messages]
      summary: Append a message to a conversation
      parameters:
        - $ref: '#/components/parameters/ConversationId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMessageRequest'
      responses:
        '202':
          description: Message accepted, AI response processing may continue asynchronously
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '404':
          description: Conversation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /approvals/pending:
    get:
      tags: [Approvals]
      summary: Fetch pending AI responses that require review
      parameters:
        - name: organizationId
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 25
      responses:
        '200':
          description: Pending approvals ordered by wait time and priority
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingApprovalListResponse'
  /approvals/{approvalId}/decision:
    post:
      tags: [Approvals]
      summary: Approve, modify, or reject an AI response
      parameters:
        - $ref: '#/components/parameters/ApprovalId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApprovalDecisionRequest'
      responses:
        '200':
          description: Decision applied successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalDecisionResponse'
        '409':
          description: Response already handled or expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /dashboard/summary:
    get:
      tags: [Dashboard]
      summary: Retrieve current KPI cards
      parameters:
        - $ref: '#/components/parameters/TimeRange'
        - $ref: '#/components/parameters/OrganizationIdQuery'
        - name: agentId
          in: query
          schema:
            type: string
            format: uuid
          required: false
      responses:
        '200':
          description: Summary metrics for dashboard hero cards
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardSummaryResponse'
  /dashboard/timeseries:
    get:
      tags: [Dashboard]
      summary: Retrieve chart-ready time series data
      parameters:
        - $ref: '#/components/parameters/TimeRange'
        - $ref: '#/components/parameters/OrganizationIdQuery'
        - name: metric
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/DashboardMetric'
      responses:
        '200':
          description: Time series datapoints for visualization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardTimeSeriesResponse'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Supabase access token in `Authorization: Bearer` header.
  parameters:
    ConversationId:
      name: conversationId
      in: path
      required: true
      schema:
        type: string
        format: uuid
    ApprovalId:
      name: approvalId
      in: path
      required: true
      schema:
        type: string
        format: uuid
    OrganizationIdQuery:
      name: organizationId
      in: query
      required: false
      schema:
        type: string
        format: uuid
    TimeRange:
      name: range
      in: query
      required: false
      schema:
        type: string
        enum: ["15m","1h","6h","24h","7d","30d"]
      description: Rolling time window referenced in dashboard views.
  schemas:
    ConversationStatus:
      type: string
      enum: [active, pending_approval, awaiting_agent, agent_live, escalated, resolved, closed, error]
    MessageSenderType:
      type: string
      enum: [customer, ai, agent, system]
    ApprovalAction:
      type: string
      enum: [approved, modified, rejected]
    DashboardMetric:
      type: string
      enum: [active_conversations, avg_confidence, approval_rate, response_p95_ms, escalations, customer_csats]
    StartConversationRequest:
      type: object
      required: [message]
      properties:
        organizationId:
          type: string
          format: uuid
          description: Organization context; required for unauthenticated visitors.
        customerId:
          type: string
          format: uuid
          nullable: true
          description: Authenticated customer id (if known).
        metadata:
          type: object
          additionalProperties: true
          description: Session metadata (browser, referral, etc.).
        message:
          type: object
          required: [body]
          properties:
            body:
              type: string
            attachments:
              type: array
              items:
                type: object
                properties:
                  type:
                    type: string
                  url:
                    type: string
                    format: uri
                  name:
                    type: string
    ConversationResponse:
      type: object
      required: [conversation, messages]
      properties:
        conversation:
          $ref: '#/components/schemas/Conversation'
        messages:
          type: array
          items:
            $ref: '#/components/schemas/Message'
        pendingApproval:
          type: boolean
    Conversation:
      type: object
      required: [id, organizationId, status, channel, startedAt, lastActivityAt]
      properties:
        id:
          type: string
          format: uuid
        organizationId:
          type: string
          format: uuid
        customerId:
          type: string
          format: uuid
          nullable: true
        externalCustomerRef:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ConversationStatus'
        channel:
          type: string
          enum: [text-web]
        priority:
          type: string
          enum: [standard, high, vip]
        startedAt:
          type: string
          format: date-time
        endedAt:
          type: string
          format: date-time
          nullable: true
        lastActivityAt:
          type: string
          format: date-time
        pendingApprovalResponseId:
          type: string
          format: uuid
          nullable: true
        metadata:
          type: object
          additionalProperties: true
    ConversationStatusResponse:
      type: object
      required: [conversationId, status]
      properties:
        conversationId:
          type: string
          format: uuid
        status:
          $ref: '#/components/schemas/ConversationStatus'
        pendingApprovalResponseId:
          type: string
          format: uuid
          nullable: true
        updatedAt:
          type: string
          format: date-time
    ConversationStatusUpdateRequest:
      type: object
      required: [status]
      properties:
        status:
          $ref: '#/components/schemas/ConversationStatus'
        reason:
          type: string
          enum: [agent_takeover, manual_escalation, resolved, closed]
        note:
          type: string
          nullable: true
    Message:
      type: object
      required: [id, conversationId, senderType, body, createdAt]
      properties:
        id:
          type: string
          format: uuid
        conversationId:
          type: string
          format: uuid
        senderType:
          $ref: '#/components/schemas/MessageSenderType'
        senderUserId:
          type: string
          format: uuid
          nullable: true
        body:
          type: string
        attachments:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
              url:
                type: string
                format: uri
              name:
                type: string
        aiResponse:
          $ref: '#/components/schemas/AIResponse'
          nullable: true
        sequence:
          type: integer
        createdAt:
          type: string
          format: date-time
    MessageResponse:
      type: object
      required: [message]
      properties:
        message:
          $ref: '#/components/schemas/Message'
    MessageListResponse:
      type: object
      required: [messages]
      properties:
        messages:
          type: array
          items:
            $ref: '#/components/schemas/Message'
        nextCursor:
          type: string
          format: uuid
          nullable: true
    CreateMessageRequest:
      type: object
      required: [senderType, body]
      properties:
        senderType:
          $ref: '#/components/schemas/MessageSenderType'
        body:
          type: string
        attachments:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
              url:
                type: string
                format: uri
              name:
                type: string
        metadata:
          type: object
          additionalProperties: true
    AIResponse:
      type: object
      required: [id, status, confidence, requiresApproval]
      properties:
        id:
          type: string
          format: uuid
        status:
          type: string
          enum: [pending, approved, modified, rejected, superseded, failed]
        confidence:
          type: number
          format: float
        requiresApproval:
          type: boolean
        knowledgeSources:
          type: array
          items:
            type: object
            properties:
              knowledgeItemId:
                type: string
                format: uuid
              score:
                type: number
                format: float
        generatedAt:
          type: string
          format: date-time
        latencyMs:
          type: integer
        errorReason:
          type: string
          nullable: true
    PendingApprovalListResponse:
      type: object
      required: [items]
      properties:
        items:
          type: array
          items:
            type: object
            required: [approvalId, conversationId, message, waitTimeMs, priority]
            properties:
              approvalId:
                type: string
                format: uuid
              conversationId:
                type: string
                format: uuid
              message:
                $ref: '#/components/schemas/Message'
              waitTimeMs:
                type: integer
              confidence:
                type: number
                format: float
              priority:
                type: string
                enum: [standard, high, vip]
    ApprovalDecisionRequest:
      type: object
      required: [action]
      properties:
        action:
          $ref: '#/components/schemas/ApprovalAction'
        modifiedText:
          type: string
          nullable: true
          description: Required when action is `modified`.
        note:
          type: string
          nullable: true
    ApprovalDecisionResponse:
      type: object
      required: [aiResponse]
      properties:
        aiResponse:
          $ref: '#/components/schemas/AIResponse'
        approvalRecord:
          type: object
          required: [id, action, agentId, createdAt]
          properties:
            id:
              type: string
              format: uuid
            action:
              $ref: '#/components/schemas/ApprovalAction'
            agentId:
              type: string
              format: uuid
            createdAt:
              type: string
              format: date-time
    DashboardSummaryResponse:
      type: object
      required: [range, metrics]
      properties:
        range:
          type: string
          enum: ["15m","1h","6h","24h","7d","30d"]
        metrics:
          type: array
          items:
            type: object
            required: [metric, value]
            properties:
              metric:
                $ref: '#/components/schemas/DashboardMetric'
              value:
                type: number
              trend:
                type: number
                description: Percent change versus previous window.
              target:
                type: number
                nullable: true
    DashboardTimeSeriesResponse:
      type: object
      required: [metric, points]
      properties:
        metric:
          $ref: '#/components/schemas/DashboardMetric'
        points:
          type: array
          items:
            type: object
            required: [timestamp, value]
            properties:
              timestamp:
                type: string
                format: date-time
              value:
                type: number
              breakdown:
                type: object
                additionalProperties: true
    ErrorResponse:
      type: object
      required: [code, message]
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: object
          additionalProperties: true
          nullable: true
